@page "/videos"
@rendermode InteractiveServer

<PageTitle>Videos</PageTitle>

<h1>Gallery</h1>

<div class="@(selectedVideo != null ? "no-scroll" : "")">

@if (videoPreviews == null)
{
    <p>Loading videos...</p>
}
else if (!videoPreviews.Any())
{
    <p>No videos available.</p>
}
else
{
    @if (selectedVideo != null) {
        <div class="modal-overlay" @onclick="CloseVideo">
            <div class="modal-content" @onclick:stopPropagation>
                <h2 class="video-title">@videoPreviews[selectedVideo]</h2>
                <video preload="metadata" controls autoplay class="modal-video" muted onloadedmetadata="this.volume=0.1">
                    <source src="@selectedVideoUrl" type="video/mp4">
                </video>
                <button class="close-button" @onclick="CloseVideo">X</button>
            </div>
        </div>
    }
   
    <div class="gallery">
        @foreach (var video in uploadingVideos) {
            var url = previewUrl + video.Key;
            <div class="gallery-item">
                <div class="video-entry">
                    <div class="loading-container">
                        <div class="loading-icon"></div>
                        <div class="upload-progress">@($"{video.Value:F0}%")</div>
                    </div>
                    <div class="video-title">@video.Key</div>
                </div>
            </div>
        }
        @foreach (var video in videoPreviews) {
            var url = previewUrl + video.Key;
            <div class="gallery-item">
                <div class="video-entry" @onclick="() => PlayVideo(video.Key)">
                    @if (hoveredVideo == video.Key) {
                        <video preload="metadata" autoplay class="video-video" muted onloadedmetadata="this.volume=0">
                            <source src="@url.Replace(".png", ".mp4")" type="video/mp4">
                        </video>
                    }
                    else {
                        <img src="@url.Replace(".mp4", ".png")" @onmouseover="() => PlayPreview(video.Key)" @onmouseleave="() => CloseVideo()" class="video-thumbnail" />
                    }
                    <div class="video-title">@video.Value</div>
                </div>
            </div>
        }
    </div>

}

</div>

@code {
    private Dictionary<string, string> videoPreviews;
    private Dictionary<string, float> uploadingVideos;
    private string previewUrl;
    private string videoUrl;
    private string tempUrl;
    private string? hoveredVideo;
    private string? selectedVideo;
    private string? selectedVideoUrl;
    private bool canUpdate = true;
    private readonly SemaphoreSlim updateSemaphore = new(1);
    private DateTime lastUpdateTime = DateTime.MinValue;
    private readonly TimeSpan minUpdateInterval = TimeSpan.FromMilliseconds(300); 

    [Inject]
    private MediaUpload.MediaUploadService MediaUploadService { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override void OnInitialized()
    {
        if (!MediaUploadService.isConfigSet()) {
            NavigationManager.NavigateTo("/");
        }
        previewUrl = "UploadedVideos/Previews/";
        videoUrl = "UploadedVideos/";
        tempUrl = "UploadedVideos/Temp/";
        videoPreviews = MediaUploadService.GetVideoPreviews();
        uploadingVideos = MediaUploadService.GetUploadingVideos();
        MediaUploadService.OnVideosChanged += LoadVideos;
        Task.Run(() => AutoRefreshVideos());
    }

    private async Task AutoRefreshVideos() {
        while (true) {
            LoadVideos();
            await Task.Delay(600);
        }
    }

    void PlayPreview(string video) {
        hoveredVideo = video;
        InvokeAsync(StateHasChanged);
    }

    void CloseVideo() {
        hoveredVideo = null;
        selectedVideo = null;
        selectedVideoUrl = null;
        InvokeAsync(StateHasChanged);
    }

    void PlayVideo(string video) {
        selectedVideo = video;
        var fileName = selectedVideo.Replace(".png", ".mp4");
        var filePath = Path.Combine(videoUrl, fileName);
        if (!File.Exists(filePath)) {
            selectedVideoUrl = Path.Combine(tempUrl, fileName);
        }
		else {
            selectedVideoUrl = filePath;
		}
		InvokeAsync(StateHasChanged);
	}

    private async void LoadVideos() {
        await updateSemaphore.WaitAsync();
        try {
            var now = DateTime.Now;
            if (now - lastUpdateTime < minUpdateInterval) { return;  }
            if (!canUpdate) { return; }
            videoPreviews = MediaUploadService.GetVideoPreviews();
            uploadingVideos = MediaUploadService.GetUploadingVideos();
            await InvokeAsync(StateHasChanged);
        }
        finally {
            updateSemaphore.Release();
        }

    }
}