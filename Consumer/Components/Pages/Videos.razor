@page "/videos"
@rendermode InteractiveServer

<PageTitle>Videos</PageTitle>

<h1>Gallery</h1>

@if (videoPreviews == null)
{
    <p>Loading videos...</p>
}
else if (!videoPreviews.Any())
{
    <p>No videos available.</p>
}
else
{
    <div class="gallery">
        @foreach (var video in videoPreviews) {
            var url = baseUrl + video.Key;
            <div class="gallery-item">
                <div class="video-entry">
                    @if (selectedVideo == video.Key) {
                        <video preload="metadata" controls autoplay class="video-video" muted onloadedmetadata="this.volume=0.1">
                            <source src="@url.Replace(".png", ".mp4")" type="video/mp4">
                        </video>
                    }
                    else {
                        <img src="@url.Replace(".mp4", ".png")" @onmouseover="() => PlayVideo(video.Key)" @onmouseleave="() => CloseVideo()" class="video-thumbnail" />
                    }
                    <div class="video-title">@video.Value</div>
                </div>
            </div>
        }
    </div>
}

@code {
    private Dictionary<string, string> videoPreviews;
    private string baseUrl;
    private string? selectedVideo;

    [Inject]
    private MediaUpload.MediaUploadService MediaUploadService { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override void OnInitialized()
    {
        if (!MediaUploadService.isConfigSet()) {
            NavigationManager.NavigateTo("/");
        }
        baseUrl = "/UploadedVideos/Previews/";
        videoPreviews = MediaUploadService.GetVideoPreviews();
        MediaUploadService.OnVideosChanged += LoadVideos;
    }

    void PlayVideo(string video) {
        selectedVideo = video;
	    InvokeAsync(StateHasChanged);
	}

    void CloseVideo() {
		selectedVideo = null;
	    InvokeAsync(StateHasChanged);
    }

    private async void LoadVideos() {
		//videoPreviews = new List<string>();
        //await InvokeAsync(StateHasChanged);
        videoPreviews = MediaUploadService.GetVideoPreviews();
        await InvokeAsync(StateHasChanged);
    }
}